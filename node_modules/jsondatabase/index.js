const fs = require('fs');

class JsonDB {
	constructor (options) {
		this.path = options.path;
		if (fs.existsSync(this.path)) {
			this.db = JSON.parse(fs.readFileSync(this.path));
		} else {
			let seperate = this.path.split('/');
			let file = seperate[seperate.length - 1];
			seperate.pop();
			let currentDir = './';
			if (seperate[0] == '.') seperate.shift();
			seperate.forEach(dir => {
				if (!fs.existsSync(`${currentDir}${dir}/`)) fs.mkdir(`${currentDir}${dir}/`);
				currentDir += `${dir}/`;
			});
			if (!fs.existsSync(file)) fs.writeFileSync(file, '{}');
			this.db = JSON.parse(fs.readFileSync(this.path));
		}
		this.save = ()=>fs.writeFileSync(this.path, JSON.stringify(this.db));
		let isNew = false;
		if (!this.db.sets) {
			this.db.sets = {};
			isNew = true;
		}
		if (!this.db.hashes) {
			this.db.hashes = {};
			isNew = true;
		}
		if (!this.db.keys) {
			this.db.keys = {};
			isNew = true;
		}
		if (isNew) this.save();
		this.false = 0;
		this.true = 1;
		this.error = new Error('Invalid amount of arguments');
	}

	sadd (set, item) {
		if (!set || !item) return this.error
		if (!this.db.sets[set]) this.db.sets[set] = [];
		if (this.db.sets[set].indexOf(item) > -1) return this.false;
		this.db.sets[set].push(item.toString());
		this.save();
		return this.true;
	}

	srem (set, item) {
		if (!set || !item) return this.error
		if (!this.db.sets[set]) return this.false;
		if (this.db.sets[set].indexOf(item) == -1) return this.false;
		this.db.sets[set].splice(this.db.sets[set].indexOf(item), 1);
		if (this.db.sets[set].length == 0) delete this.db.sets[set];
		this.save();
		return this.true;
	}

	smembers (set) {
		if (!set) return this.error
		if (!this.db.sets[set]) return this.false;
		return this.db.sets[set];
	}

	hset (hash, key, value) {
		if (!hash || !key || !value) return this.error
		if (!this.db.hashes[hash]) this.db.hashes[hash] = {};
		if (this.db.hashes[hash][key] == value) return this.false;
		this.db.hashes[hash][key] = value.toString();
		this.save();
		return this.true;
	}

	hget (hash, key) {
		if (!hash || !key) return this.error
		if (!this.db.hashes[hash]) return this.false;
		if (!this.db.hashes[hash][key]) return this.false;
		return this.db.hashes[hash][key];
	}

	hdel (hash, key) {
		if (!hash || !key) return this.error
		if (!this.db.hashes[hash]) return this.false;
		if (!this.db.hashes[hash][key]) return this.false;
		delete this.db.hashes[hash][key];
		if (Object.keys(this.db.hashes[hash]).length == 0) delete this.db.hashes[hash];
		this.save();
		return this.true;
	}

	hkeys (hash) {
		if (!hash) return this.error
		if (!this.db.hashes[hash]) return this.false;
		return Object.keys(this.db.hashes[hash]);
	}

	hvals (hash) {
		if (!this.db.hashes[hash]) return this.false;
		return Object.keys(this.db.hashes[hash]).map(k=>this.db.hashes[hash][k]);
	}

	hgetall (hash) {
		if (!hash) return this.error
		if (!this.db.hashes[hash]) return this.false;
		return this.db.hashes[hash];
	}

	hexists (hash) {
		if (!hash) return this.error
		if (!this.db.hashes[hash]) return this.false;
		return this.true;
	}

	hlen (hash) {
		if (!hash) return this.error
		if (!this.db.hashes[hash]) return this.false;
		return Object.keys(this.db.hashes[hash]).length;
	}

	hincrby (hash, key, incr) {
		if (!hash, !key, !incr) return this.error;
		if (!this.db.hashes[hash]) return this.false;
		if (!this.db.hashes[hash][key]) return this.false;
		this.db.hashes[hash][key] = ((parseInt(this.db.hashes[hash][key], 10) || 0) + (parseInt(incr, 10) || 1)).toString();
		this.save();
		return this.true;
	}

	hincr (hash, key) {
		if (!hash, !key) return this.error;
		if (!this.db.hashes[hash]) return this.false;
		if (!this.db.hashes[hash][key]) return this.false;
		this.db.hashes[hash][key] = ((parseInt(this.db.hashes[hash][key], 10) || 0) + 1).toString();
		this.save();
		return this.true;
	}

	hdecrby (hash, key, decr) {
		if (!hash, !key, !incr) return this.error;
		if (!this.db.hashes[hash]) return this.false;
		if (!this.db.hashes[hash][key]) return this.false;
		this.db.hashes[hash][key] = ((parseInt(this.db.hashes[hash][key], 10) || 0) - (parseInt(incr, 10) || 1)).toString();
		this.save();
		return this.true;
	}

	hdecr (hash, key) {
		if (!hash, !key) return this.error;
		if (!this.db.hashes[hash]) return this.false;
		if (!this.db.hashes[hash][key]) return this.false;
		this.db.hashes[hash][key] = ((parseInt(this.db.hashes[hash][key], 10) || 0) - 1).toString();
		this.save();
		return this.true;
	}

	kget (key) {
		if (!key) return this.error
		if (!this.db.keys[key]) return this.false;
		return this.db.keys[key];
	}

	kset (key, value) {
		if (!key || !value) return this.error
		if (this.db.keys[key] == value) return this.false;
		this.db.keys[key] = value;
		this.save();
		return this.true;
	}

	kdel (key) {
		if (!key) return this.error
		if (!this.db.keys[key]) return this.false;
		delete this.db.keys[key];
		this.save();
		return this.true;
	}

	keys () {
		return Object.keys(this.db.keys);
	}

	kexists (key) {
		if (!key) return this.error
		if (!this.db.keys[key]) return this.false;
		return this.true;
	}

	krename (oldk, newk) {
		if (!oldk || !newk) return this.error;
		if (!this.db.keys[oldk]) return this.false;
		this.db.keys[newk] = this.db.keys[oldk];
		delete this.db.keys[oldk];
		this.save();
		return this.true;
	}

	kincrby (key, incr) {
		if (!key || !incr) return this.error;
		if (!this.db.keys[key]) return this.false;
		this.db.keys[key] = ((parseInt(this.db.keys[key], 10) || 0) + (parseInt(incr, 10) || 1)).toString();
		this.save();
		return this.true;
	}

	kincr (key) {
		if (!key) return this.error;
		if (!this.db.keys[key]) return this.false;
		this.db.keys[key] = ((parseInt(this.db.keys[key], 10) || 0) + 1).toString();
		this.save();
		return this.true;
	}

	kdecrby (key, decr) {
		if (!key || !decr) return this.error;
		if (!this.db.keys[key]) return this.false;
		this.db.keys[key] = ((parseInt(this.db.keys[key], 10) || 0) - (parseInt(decr, 10) || 1)).toString();
		this.save();
		return this.true;
	}

	kdecr (key) {
		if (!key) return this.error;
		if (!this.db.keys[key]) return this.false;
		this.db.keys[key] = ((parseInt(this.db.keys[key], 10) || 0) - 1).toString();
		this.save();
		return this.true;
	}
}

module.exports = JsonDB;
